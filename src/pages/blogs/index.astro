---
import Layout from '../../layouts/Layout.astro'
import { getCollection } from 'astro:content'

const blogs = await getCollection('blogs')
// @ts-ignore - 'oss' will be available after Astro regenerates content types
const oss = await (getCollection as any)('oss')

const items = [...blogs.map((entry) => ({ entry, type: 'blogs' as const })), ...oss.map((entry) => ({ entry, type: 'oss' as const }))].sort(
  (a, b) => {
    const ad = a.entry.data.date ? a.entry.data.date.getTime() : 0
    const bd = b.entry.data.date ? b.entry.data.date.getTime() : 0
    return bd - ad
  },
)

const pageTitle = 'Blogs'
const pageDescription = 'Latest insights, guides & notes — crafted for fast, practical learning.'
---

<Layout
  title={pageTitle}
  description={pageDescription}
  image=""
  keyword={Array.from(new Set(items.flatMap((p) => p.entry.data.tags || []))).join(', ')}
>
  <section class="relative overflow-hidden">
    <div class="absolute inset-0 -z-10 opacity-60 dark:opacity-40 [mask-image:radial-gradient(circle_at_center,white,transparent)]">
      <div
        class="absolute -top-32 left-1/2 -translate-x-1/2 w-[1200px] h-[1200px] bg-gradient-to-br from-blue-500/20 via-emerald-400/10 to-transparent blur-3xl"
      >
      </div>
    </div>
    <div class="mx-auto max-w-7xl px-6 pt-12 pb-8">
      <div class="max-w-3xl">
        <h1
          class="text-4xl md:text-5xl font-extrabold tracking-tight bg-gradient-to-br from-gray-900 via-gray-700 to-gray-400 dark:from-white dark:via-slate-200 dark:to-slate-400 bg-clip-text text-transparent"
        >
          {pageTitle}
        </h1>
        <p class="mt-4 text-lg text-gray-600 dark:text-gray-400 leading-relaxed">
          {pageDescription}
        </p>
        <div class="mt-6 flex flex-col sm:flex-row gap-4 sm:items-center">
          <div class="relative flex-1">
            <input
              id="search"
              type="search"
              placeholder="Search posts..."
              class="w-full rounded-xl bg-white/70 dark:bg-slate-900/60 backdrop-blur border border-gray-300/60 dark:border-slate-600/50 px-4 py-2.5 pr-10 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500/60 focus:border-blue-500 shadow-sm"
            />
            <div class="pointer-events-none absolute inset-y-0 right-3 flex items-center text-gray-400">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-4.35-4.35M11 19a8 8 0 1 1 0-16 8 8 0 0 1 0 16Z"></path>
              </svg>
            </div>
          </div>
          <div class="flex sm:justify-end">
            <button
              id="themeToggleBlog"
              type="button"
              class="h-10 px-3 inline-flex items-center gap-2 rounded-xl border border-gray-300/60 bg-white dark:bg-gray-700/40 hover:bg-gray-50 dark:hover:bg-gray-600/60 transition"
              aria-label="Toggle theme"
            >
              <svg viewBox="0 0 25 25" height="18" width="18" class="pointer-events-none">
                <path
                  class="sun"
                  fill-rule="evenodd"
                  d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"
                ></path>
                <path
                  class="moon"
                  fill-rule="evenodd"
                  d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"
                ></path>
              </svg>
              <span class="sun-text text-xs font-medium hidden sm:inline">Light</span>
              <span class="moon-text text-xs font-medium hidden sm:inline">Dark</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <section class="mx-auto max-w-7xl px-6 pb-24" id="posts-wrapper">
    {items.length === 0 && <p class="text-center py-20 text-gray-500">No posts yet.</p>}
    <ul id="posts-grid" class="divide-y divide-gray-200/60 dark:divide-slate-700/60">
      {
        items.map((item) => {
          const post = item.entry
          const slug = post.id.split('_')[1] || post.id
          const date = post.data.date ? post.data.date.toISOString() : ''
          const cover = post.data.image?.url
          return (
            <li
              class="group relative py-4 transition-colors hover:bg-gray-50/70 dark:hover:bg-slate-800/30 rounded-xl"
              data-tags={(post.data.tags || []).join(',')}
              data-title={(post.data.title || '').toLowerCase()}
              data-description={(post.data.description || '').toLowerCase()}
            >
              <a href={item.type === 'oss' ? `/oss/${slug}` : `/blogs/${slug}`} class="flex items-start gap-4">
                {cover ? (
                  <img
                    src={cover}
                    alt={post.data.title}
                    loading="lazy"
                    class="w-24 h-24 rounded-lg object-cover object-center flex-shrink-0"
                  />
                ) : (
                  <div class="w-24 h-24 rounded-lg bg-gradient-to-br from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-800 flex items-center justify-center text-xs text-slate-500 dark:text-slate-400 flex-shrink-0">
                    No cover
                  </div>
                )}
                <div class="min-w-0 flex-1">
                  <div class="flex items-center gap-2 flex-wrap mb-1 min-h-[1.5rem]">
                    {(post.data.tags || []).slice(0, 3).map((tag) => (
                      <span class="inline-flex items-center rounded-full bg-blue-50 dark:bg-blue-500/10 text-blue-700 dark:text-blue-300 border border-blue-500/20 px-2 py-0.5 text-[10px] font-medium tracking-wide uppercase">
                        {tag}
                      </span>
                    ))}
                  </div>
                  <h2 class="text-base md:text-lg font-semibold leading-snug text-gray-900 dark:text-slate-100 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors line-clamp-3">
                    {post.data.title}
                  </h2>
                  <p class="mt-1 text-sm text-gray-600 dark:text-gray-400 line-clamp-3">{post.data.description}</p>
                  <div class="mt-2 flex items-center gap-3 text-[11px] font-medium text-gray-500 dark:text-gray-500">
                    {date && (
                      <time datetime={date}>
                        {new Date(date).toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' })}
                      </time>
                    )}
                    <span aria-hidden>•</span>
                    <span class="opacity-0 group-hover:opacity-100 transition-opacity text-blue-600 dark:text-blue-400 inline-flex items-center gap-1">
                      Read
                      <svg class="w-3.5 h-3.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14M13 6l6 6-6 6" />
                      </svg>
                    </span>
                  </div>
                </div>
              </a>
            </li>
          )
        })
      }
    </ul>
  </section>
</Layout>

<script>
  const input = document.getElementById('search') as HTMLInputElement | null
  const grid = document.getElementById('posts-grid') as HTMLUListElement | null
  const tagFilter = document.getElementById('tag-filter') as HTMLDivElement | null

  function applyFilters() {
    const q = (input?.value || '').trim().toLowerCase()
    const activeTagEl = tagFilter?.querySelector('.tag-pill.active') as HTMLButtonElement | null
    grid?.querySelectorAll('li').forEach((li) => {
      const el = li as HTMLElement
      const title = el.dataset.title || ''
      const desc = el.dataset.description || ''
      const matchesText = !q || title.includes(q) || desc.includes(q)
      el.classList.toggle('hidden', !matchesText)
    })
  }

  input?.addEventListener('input', applyFilters)
  tagFilter?.addEventListener('click', (e) => {
    const target = e.target as HTMLElement
    const btn = target.closest('button[data-tag]') as HTMLButtonElement | null
    if (!btn) return
    tagFilter.querySelectorAll('button').forEach((b) => b.classList.remove('active'))
    btn.classList.add('active')
    applyFilters()
  })

  const themeBtn = document.getElementById('themeToggleBlog')
  if (themeBtn) {
    let stored = localStorage.getItem('theme')
    let prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
    let theme = stored === 'dark' || stored === 'light' ? stored : prefersDark ? 'dark' : 'light'
    const root = document.documentElement
    const applyTheme = (t) => {
      if (t === 'dark') {
        root.classList.add('dark')
        root.classList.remove('light')
      } else {
        root.classList.remove('dark')
        root.classList.add('light')
      }
      localStorage.setItem('theme', t)
      const meta = document.querySelector('meta[name="theme-color"]')
      if (meta) meta.setAttribute('content', t === 'dark' ? '#0f121f' : '#C84B31')
    }
    themeBtn.addEventListener('click', (e) => {
      e.preventDefault()
      theme = theme === 'dark' ? 'light' : 'dark'
      applyTheme(theme)
    })
  }
</script>

<style>
  .tag-pill {
    @apply text-xs px-3 py-1 rounded-full border border-gray-300/60 dark:border-slate-600/60 bg-white/60 dark:bg-slate-900/40 backdrop-blur font-medium text-gray-700 dark:text-gray-300 hover:border-blue-500/60 hover:text-blue-600 dark:hover:text-blue-300 transition-all shadow-sm;
  }
  .tag-pill.active {
    @apply border-blue-600 text-blue-600 dark:text-blue-300 dark:border-blue-400 bg-blue-50 dark:bg-blue-500/10 shadow;
  }
  #posts-grid li {
    animation: fadeIn 0.6s ease both;
  }
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(8px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .sun {
    fill: currentColor;
  }
  .moon {
    fill: transparent;
  }
  .sun-text {
    display: inline-block;
  }
  .moon-text {
    display: none;
  }
  :global(.dark) .sun {
    fill: transparent;
  }
  :global(.dark) .moon {
    fill: currentColor;
  }
  :global(.dark) .sun-text {
    display: none;
  }
  :global(.dark) .moon-text {
    display: inline-block;
  }
</style>
