---
import Layout from '../../layouts/Layout.astro'
import { getCollection } from 'astro:content'

const posts = (await getCollection('blogs')).sort((a, b) => {
  const ad = a.data.date ? a.data.date.getTime() : 0
  const bd = b.data.date ? b.data.date.getTime() : 0
  return bd - ad
})

const pageTitle = 'Blogs'
const pageDescription = 'Latest insights, guides & notes â€” crafted for fast, practical learning.'

const allTags = Array.from(new Set(posts.flatMap((p) => p.data.tags || []))).sort((a, b) => a.localeCompare(b))
---

<Layout title={pageTitle} description={pageDescription} image="">
  <section class="relative overflow-hidden">
    <div class="absolute inset-0 -z-10 opacity-60 dark:opacity-40 [mask-image:radial-gradient(circle_at_center,white,transparent)]">
      <div
        class="absolute -top-32 left-1/2 -translate-x-1/2 w-[1200px] h-[1200px] bg-gradient-to-br from-blue-500/20 via-emerald-400/10 to-transparent blur-3xl"
      >
      </div>
    </div>
    <div class="mx-auto max-w-7xl px-6 pt-12 pb-8">
      <div class="max-w-3xl">
        <h1
          class="text-4xl md:text-5xl font-extrabold tracking-tight bg-gradient-to-br from-gray-900 via-gray-700 to-gray-400 dark:from-white dark:via-slate-200 dark:to-slate-400 bg-clip-text text-transparent"
        >
          {pageTitle}
        </h1>
        <p class="mt-4 text-lg text-gray-600 dark:text-gray-400 leading-relaxed">
          {pageDescription}
        </p>
        <div class="mt-6 flex flex-col sm:flex-row gap-4 sm:items-center">
          <div class="relative flex-1">
            <input
              id="search"
              type="search"
              placeholder="Search posts..."
              class="w-full rounded-xl bg-white/70 dark:bg-slate-900/60 backdrop-blur border border-gray-300/60 dark:border-slate-600/50 px-4 py-2.5 pr-10 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500/60 focus:border-blue-500 shadow-sm"
            />
            <div class="pointer-events-none absolute inset-y-0 right-3 flex items-center text-gray-400">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-4.35-4.35M11 19a8 8 0 1 1 0-16 8 8 0 0 1 0 16Z"></path>
              </svg>
            </div>
          </div>
          <div class="flex flex-wrap gap-2" id="tag-filter">
            <button data-tag="" class="tag-pill active">All</button>
            {
              allTags.map((tag) => (
                <button data-tag={tag} class="tag-pill">
                  {tag}
                </button>
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </section>

  <section class="mx-auto max-w-7xl px-6 pb-24" id="posts-wrapper">
    {posts.length === 0 && <p class="text-center py-20 text-gray-500">No posts yet.</p>}
    <ul id="posts-grid" class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
      {
        posts.map((post) => {
          const slug = post.id.split('_')[1] || post.id
          const date = post.data.date ? post.data.date.toISOString() : ''
          const cover = post.data.image?.url
          return (
            <li
              class="group relative rounded-2xl border border-gray-200/70 dark:border-slate-700/70 bg-white/80 dark:bg-slate-900/60 backdrop-blur hover:shadow-xl hover:border-blue-400/60 dark:hover:border-blue-400/40 transition-all duration-300 overflow-hidden flex flex-col"
              data-tags={(post.data.tags || []).join(',')}
              data-title={post.data.title.toLowerCase()}
              data-description={post.data.description.toLowerCase()}
            >
              <a href={`/blogs/${slug}`} class="flex flex-col flex-1">
                {cover && (
                  <div class="relative">
                    <img
                      src={cover}
                      alt={post.data.title}
                      loading="lazy"
                      class="aspect-[16/9] w-full object-cover object-center transition-transform duration-500 group-hover:scale-[1.04]"
                    />
                    <div class="absolute inset-0 bg-gradient-to-t from-black/50 via-black/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity" />
                  </div>
                )}
                <div class="flex flex-col flex-1 p-5">
                  <div class="flex items-start gap-2 flex-wrap mb-3 min-h-[1.75rem]">
                    {(post.data.tags || []).slice(0, 3).map((tag) => (
                      <span class="inline-flex items-center gap-1 rounded-full bg-gradient-to-r from-blue-500/15 via-blue-500/5 to-transparent text-blue-600 dark:text-blue-300 border border-blue-500/20 px-2 py-0.5 text-[10px] font-medium tracking-wide uppercase">
                        {tag}
                      </span>
                    ))}
                  </div>
                  <h2 class="text-lg font-bold leading-snug group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                    {post.data.title}
                  </h2>
                  <p class="mt-2 text-sm text-gray-600 dark:text-gray-400 line-clamp-3">{post.data.description}</p>
                  <div class="mt-4 flex items-center justify-between text-[11px] font-medium text-gray-500 dark:text-gray-500">
                    {date && (
                      <time datetime={date}>
                        {new Date(date).toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' })}
                      </time>
                    )}
                    <span class="opacity-0 group-hover:opacity-100 transition-opacity text-blue-600 dark:text-blue-400 flex items-center gap-1">
                      Read
                      <svg class="w-3.5 h-3.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14M13 6l6 6-6 6" />
                      </svg>
                    </span>
                  </div>
                </div>
              </a>
            </li>
          )
        })
      }
    </ul>
  </section>
</Layout>

<script>
  const input = document.getElementById('search') as HTMLInputElement | null
  const grid = document.getElementById('posts-grid') as HTMLUListElement | null
  const tagFilter = document.getElementById('tag-filter') as HTMLDivElement | null

  function applyFilters() {
    const q = (input?.value || '').trim().toLowerCase()
    const activeTagEl = tagFilter?.querySelector('.tag-pill.active') as HTMLButtonElement | null
    const activeTag = activeTagEl?.dataset.tag || ''
    grid?.querySelectorAll('li').forEach((li) => {
      const el = li as HTMLElement
      const title = el.dataset.title || ''
      const desc = el.dataset.description || ''
      const tags = (el.dataset.tags || '').split(',').filter(Boolean)
      const matchesText = !q || title.includes(q) || desc.includes(q)
      const matchesTag = !activeTag || tags.includes(activeTag)
      el.classList.toggle('hidden', !(matchesText && matchesTag))
    })
  }

  input?.addEventListener('input', applyFilters)
  tagFilter?.addEventListener('click', (e) => {
    const target = e.target as HTMLElement
    const btn = target.closest('button[data-tag]') as HTMLButtonElement | null
    if (!btn) return
    tagFilter.querySelectorAll('button').forEach((b) => b.classList.remove('active'))
    btn.classList.add('active')
    applyFilters()
  })
</script>

<style>
  .tag-pill {
    @apply text-xs px-3 py-1 rounded-full border border-gray-300/60 dark:border-slate-600/60 bg-white/60 dark:bg-slate-900/40 backdrop-blur font-medium text-gray-700 dark:text-gray-300 hover:border-blue-500/60 hover:text-blue-600 dark:hover:text-blue-300 transition-all shadow-sm;
  }
  .tag-pill.active {
    @apply border-blue-600 text-blue-600 dark:text-blue-300 dark:border-blue-400 bg-blue-50 dark:bg-blue-500/10 shadow;
  }
  #posts-grid li {
    animation: fadeIn 0.6s ease both;
  }
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(8px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
