---
import { languages } from '../i18n/ui'
interface Props {
  langName: string
}
const { langName } = Astro.props as Props
---

<ul class="hidden lg:flex lg:items-center gap-2 text-sm print:hidden">
  <li class="group">
    <button
      id="langSwitch"
      type="button"
      data-target={langName === 'en' ? '/th' : '/'}
      class="h-8 px-3 inline-flex items-center gap-1 border border-gray-300/60 bg-white dark:bg-gray-700/40 group-hover:text-[var(--text-color-link)] dark:group-hover:text-[var(--text-color-link)] hover:bg-gray-50 dark:hover:bg-gray-600/60 transition"
      aria-label="Switch language"
    >
      <svg
        viewBox="0 0 24 24"
        width="16"
        height="16"
        fill="none"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <circle cx="12" cy="12" r="10"></circle>
        <path d="M2 12h20M12 2a15 15 0 0 1 0 20M12 2a15 15 0 0 0 0 20"></path>
      </svg>
      <span class="uppercase text-xs font-medium mt-0.5">{languages[langName]}</span>
    </button>
  </li>
  <li class="group">
    <button
      type="button"
      id="on-printer"
      class="h-8 px-3 inline-flex items-center gap-1 border border-gray-300/60 bg-white dark:bg-gray-700/40 group-hover:text-[var(--text-color-link)] dark:group-hover:text-[var(--text-color-link)] hover:bg-gray-50 dark:hover:bg-gray-600/60 transition"
      aria-label="Print CV"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        height="16"
        width="16"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="M6 9V4h12v5"></path>
        <path d="M6 14H5a3 3 0 0 1-3-3v-1a3 3 0 0 1 3-3h14a3 3 0 0 1 3 3v1a3 3 0 0 1-3 3h-1"></path>
        <path d="M6 17h12v3H6z"></path>
        <path d="M9 14h6"></path>
      </svg>
      <span class="uppercase text-xs font-medium mt-0.5">cv</span>
    </button>
  </li>
  <li class="group">
    <button
      id="themeToggle"
      class="h-8 px-3 inline-flex items-center gap-1 border border-gray-300/60 bg-white dark:bg-gray-700/40 group-hover:text-[var(--text-color-link)] dark:group-hover:text-[var(--text-color-link)] hover:bg-gray-50 dark:hover:bg-gray-600/60 transition"
      aria-label="Toggle theme"
    >
      <svg viewBox="0 0 25 25" height="16" width="16" class="pointer-events-none">
        <path
          class="sun"
          fill-rule="evenodd"
          d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"
        ></path>
        <path
          class="moon"
          fill-rule="evenodd"
          d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"
        ></path>
      </svg>
      <span class="sun-text text-xs font-medium">Light</span>
      <span class="moon-text text-xs font-medium">Dark</span>
    </button>
  </li>
</ul>
<style>
  .sun {
    fill: currentColor;
  }
  .moon {
    fill: transparent;
  }
  .sun-text {
    display: inline-block;
  }
  .moon-text {
    display: none;
  }
  :global(.dark) .sun {
    fill: transparent;
  }
  :global(.dark) .moon {
    fill: currentColor;
  }
  :global(.dark) .sun-text {
    display: none;
  }
  :global(.dark) .moon-text {
    display: inline-block;
  }
</style>
<script>
  const S = { printBtn: 'on-printer', themeToggle: '#themeToggle', langSwitch: 'langSwitch' }
  function initPrint() {
    const b = document.getElementById(S.printBtn)
    if (!b) return
    b.addEventListener('click', (e) => {
      e.preventDefault()
      print()
    })
  }
  function initLang() {
    const b = document.getElementById(S.langSwitch)
    if (!b) return
    b.addEventListener('click', (e) => {
      e.preventDefault()
      const target = b.getAttribute('data-target')
      if (target) window.location.href = target
    })
  }
  function initTheme() {
    const btn = document.querySelector(S.themeToggle)
    if (!btn) return
    const stored = localStorage.getItem('theme')
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
    let theme = stored === 'dark' || stored === 'light' ? stored : prefersDark ? 'dark' : 'light'
    const root = document.documentElement
    const apply = (t) => {
      if (t === 'dark') {
        root.classList.add('dark')
        root.classList.remove('light')
      } else {
        root.classList.remove('dark')
        root.classList.add('light')
      }
      localStorage.setItem('theme', t)
    }

    btn.addEventListener('click', (e) => {
      e.preventDefault()
      theme = theme === 'dark' ? 'light' : 'dark'
      apply(theme)
    })
  }
  const init = () => {
    initPrint()
    initLang()
    initTheme()
  }
  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', init)
  else init()
</script>
