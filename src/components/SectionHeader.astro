---
import dayjs from 'dayjs'
import numeral from 'numeral'
import ThemeIcon from './ThemeIcon.astro'
import { languages } from '../i18n/ui'
import { getLangFromUrl, getTranslate } from '../i18n/utils'
import coding from '../i18n/coding.json'
const langName = getLangFromUrl(Astro.url)
const t = getTranslate(Astro.url)

import 'dayjs/locale/th'

import { Image } from 'astro:assets'
import photo from '../assets/kk_00248.webp'

const showAge = () => birthday.fromNow(true)
const showBirthday = () =>
  langName === 'en' ? birthday.locale('en').format('MMMM DD, YYYY') : birthday.add(543, 'y').locale('th').format('DD MMMM YYYY')

// const availableLocales = () => {
//   return this.$i18n.locales.filter(i => i.code === this.$i18n.locale)
// }
const showNationalD = () => {
  let regex: RegExp = /(\d)(\d{4})(\d{5})(\d{2})(\d{1}).*/gi
  const [, ...id]: any = regex.exec(resume.national_id)
  return id.join(' ')
}

const showSalary = async () => {
  const { base, day, hour } = experience.salary
  if (langName == 'en') {
    const usdt = await fetch('https://api.bitkub.com/api/market/ticker?sym=THB_USDT')
    const res = await usdt.json()

    const perHour = Math.round((base / day / hour / res['THB_USDT'].last) * 100) / 100
    return `${t('head.salary.currency')}${perHour} ${t('head.salary.hour')}`
  } else {
    const perHour = Math.round((base / day / hour) * 100) / 100
    return `${perHour} ${t('head.salary.currency')}${t('head.salary.hour')}`
  }
}
const showSalaryFull = () => {
  return `${numeral(experience.salary.base).format('0,0')} THB`
}
const showExpect = () => {
  return `${numeral(experience.salary.expect).format('0,0')} THB`
}

interface Props {
  resume: any
  experience: any
}

const { experience, resume } = Astro.props
const birthday = dayjs(experience.birthday)
// Load coding stats (wakatime) from content collection
// codingData.wakatime provides total coding time string
---

<section class="py-8 md:py-12">
  <div class="max-w-7xl mx-auto px-4">
    <div class="md:grid md:grid-cols-8 md:gap-8">
      <div class="md:col-span-2">
        <div class="hidden md:flex justify-end print:hidden">
          <Image src={photo} width={510} height={620} loading="lazy" alt="" class="rounded-lg shadow-md object-cover" />
        </div>
      </div>
      <div class="md:col-span-6">
        <div class="flex items-start justify-between gap-4">
          <h1 class="uppercase th-label mt-2 text-3xl md:text-4xl font-bold tracking-tight text-gray-900 dark:text-gray-100">
            {resume.fullname}
          </h1>
          <ul class="list-none gap-2 text-sm print:hidden">
            <li>
              <a
                href={langName === 'en' ? '/th' : '/'}
                class="text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 font-medium"
              >
                {languages[langName]}
              </a>
            </li>
          </ul>
        </div>
        <span class="th-label block mt-1 text-lg font-medium text-gray-600 dark:text-gray-300 print:hidden">{resume.job}</span>
        <span class="th-label hidden print:block text-xl font-semibold text-gray-900">{resume.fullname_th}</span>
        <div class="flex gap-2 mt-2 flex-wrap items-center print:hidden text-[11px] leading-[1.3]">
          <a
            id="wakatime-badge"
            href="https://wakatime.com/@dvgamerr"
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center justify-center gap-1 rounded-none border border-blue-300/60 bg-blue-50 dark:bg-blue-500/10 px-1 py-0.5 font-medium text-blue-700 dark:text-blue-300 hover:bg-blue-100 dark:hover:bg-blue-500/20 transition text-center"
            aria-label="WakaTime coding activity"
          >
            <span class="w-2 h-2 rounded-full bg-blue-500 animate-pulse"></span>
            <span class="mt-0.5">WakaTime</span>
            <span class="mt-0.5 font-semibold" data-count>{coding.wakatime}</span>
          </a>
          <a
            id="gh-followers"
            href="https://github.com/dvgamerr"
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center justify-center gap-1 rounded-none border border-yellow-300/60 bg-yellow-50 dark:bg-yellow-500/10 px-1 py-0.5 font-medium text-yellow-700 dark:text-yellow-300 hover:bg-yellow-100 dark:hover:bg-yellow-500/20 transition text-center"
            aria-label="GitHub followers"
          >
            <svg viewBox="0 0 16 16" width="12" height="12" aria-hidden="true" class="fill-current"
              ><path
                d="M8 0C3.58 0 0 3.73 0 8.337c0 3.687 2.292 6.81 5.47 7.91.4.077.547-.177.547-.394 0-.194-.007-.71-.01-1.395-2.226.5-2.695-1.099-2.695-1.099-.364-.958-.89-1.214-.89-1.214-.727-.51.055-.5.055-.5.803.058 1.225.845 1.225.845.715 1.255 1.874.893 2.33.683.072-.534.28-.893.508-1.098-1.777-.207-3.644-.915-3.644-4.074 0-.9.31-1.636.823-2.213-.083-.207-.357-1.04.078-2.17 0 0 .672-.22 2.2.846A7.33 7.33 0 0 1 8 3.987c.68.003 1.366.094 2.005.276 1.527-1.065 2.198-.846 2.198-.846.437 1.13.163 1.963.08 2.17.513.577.822 1.313.822 2.213 0 3.167-1.87 3.864-3.652 4.067.287.257.543.764.543 1.54 0 1.112-.01 2.008-.01 2.283 0 .219.146.474.55.393 3.175-1.101 5.465-4.223 5.465-7.909C16 3.73 12.42 0 8 0Z"
              ></path></svg
            >
            <span class="mt-0.5">Github</span>
            <span class="mt-0.5 font-semibold" data-count>...</span>
          </a>
          <span
            id="visitors-badge"
            class="inline-flex items-center justify-center gap-1 rounded-none border border-emerald-300/60 bg-emerald-50 dark:bg-emerald-500/10 px-1 py-0.5 font-medium text-emerald-700 dark:text-emerald-300 text-center"
          >
            <span class="w-2 h-2 rounded-full bg-emerald-500"></span>
            <span class="mt-0.5">Visitors</span>
            <span class="mt-0.5 font-semibold" data-count>...</span>
          </span>
        </div>
        <p contenteditable="false" class="mt-4 leading-relaxed text-gray-700 dark:text-gray-300 text-sm md:text-base">{resume.detail}</p>
        <div class="mt-6">
          <div class="grid grid-cols-2 sm:grid-cols-3 gap-4 text-sm">
            <div class="flex flex-col justify-start">
              <strong class="font-medium th-label text-gray-900 dark:text-gray-100 leading-[0.8] print:hidden">{resume.nickname}</strong>
              <strong class="hidden print:block font-medium th-label leading-[0.8] text-gray-900">
                {resume.nickname}&nbsp;{langName === 'en' ? <span class="text-gray-600">({resume.nickname_th})</span> : <span />}
              </strong>
              <small class="uppercase mt-0.5 text-gray-500 dark:text-gray-400">{t('head.nickname')}</small>
            </div>
            <div class="flex flex-col justify-start">
              <strong class="font-medium th-label text-gray-900 dark:text-gray-100 leading-[0.8]">{showBirthday}</strong>
              <small class="uppercase mt-0.5 text-gray-500 dark:text-gray-400"
                >{t('head.age')}&nbsp;{showAge().replace('years', t('head.age.old'))}</small
              >
            </div>
            <div class="flex flex-col justify-start col-span-2 sm:col-span-1">
              <strong class="font-medium th-label text-gray-900 dark:text-gray-100 flex flex-wrap gap-x-2">
                {
                  Object.keys(resume.language).map((e) => (
                    <div class="flex items-center gap-1">
                      <span class="capitalize leading-[0.8] ">{e}</span>
                      <small class="uppercase text-xs text-gray-500 leading-[0.8] ">({resume.language[e]})</small>
                    </div>
                  ))
                }
              </strong>
              <small class="uppercase mt-0.5 text-gray-500 dark:text-gray-400">{t('head.language')}</small>
            </div>
            <div class="print:flex flex-col justify-start hidden">
              <strong class="font-medium th-label leading-[0.8] text-gray-900">{resume.religion}</strong>
              <small class="uppercase mt-0.5 text-gray-500">{t('head.religion')}</small>
            </div>
            <div class="print:flex flex-col justify-start hidden">
              <strong class="font-medium th-label leading-[0.8] text-gray-900">{resume.national}</strong>
              <small class="uppercase mt-0.5 text-gray-500">{t('head.nationality')}</small>
            </div>
            <div class="print:flex flex-col justify-start hidden">
              <strong class="font-medium th-label leading-[0.8] text-gray-900">{showNationalD}</strong>
              <small class="uppercase mt-0.5 text-gray-500">{t('head.national_id')}</small>
            </div>
            <div class="flex flex-col justify-start">
              <strong class="font-medium th-label text-gray-900 dark:text-gray-100 leading-[0.8]">{resume.location}</strong>
              <small class="uppercase mt-0.5 text-gray-500 dark:text-gray-400">{t('head.location')}</small>
            </div>
            <div class="flex flex-col justify-start">
              <strong class="font-medium th-label text-gray-900 dark:text-gray-100 leading-[0.8] print:hidden">{showSalary}</strong>
              <small class="uppercase mt-0.5 text-gray-500 dark:text-gray-400 print:hidden">{t('head.income')}</small>
              <strong class="hidden print:block font-medium th-label leading-[0.8] text-gray-900">{showSalaryFull}</strong>
              <small class="uppercase hidden print:block mt-0.5 text-gray-500">{t('head.salary')}</small>
            </div>
            <div class="print:flex flex-col justify-start hidden">
              <strong class="font-medium th-label leading-[0.8] text-gray-900">{showExpect}</strong>
              <small class="uppercase mt-0.5 text-gray-500">{t('head.salary.expect')}</small>
            </div>
            <div class="flex flex-col leading-[0.8] print:hidden">
              {
                experience.interview ? (
                  <span class="inline-block rounded-none bg-green-600/90 text-white text-xs px-2 py-0.5 -mt-1.5 font-medium w-fit">
                    {t('head.availability.yes')}
                  </span>
                ) : (
                  <span class="inline-block rounded-none bg-red-600/90 text-white text-xs px-2 py-0.5 -mt-1.5 font-medium w-fit">
                    {t('head.availability.no')}
                  </span>
                )
              }
              <small class="uppercase mt-1.5 text-gray-500 dark:text-gray-400">{t('head.availability')}</small>
            </div>
          </div>

          <ul class="flex items-center gap-4 my-6 print:hidden">
            <li>
              <a
                href="#"
                rel="noopener noreferrer"
                id="on-printer"
                class="inline-flex items-center gap-1 text-xs font-medium text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
              >
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="-0.5 -0.5 14 14" height="16" width="16" class="stroke-current">
                  <g id="printer">
                    <path
                      fill-rule="evenodd"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M2.761571428571429 4.570428571428572c-0.21542857142857144 -1.1375000000000002 -0.23214285714285715 -1.8877857142857142 -0.08635714285714285 -2.9120000000000004a0.8914285714285715 0.8914285714285715 0 0 1 0.7911428571428571 -0.7540000000000001C5.731142857142857 0.6574285714285714 7.254928571428572 0.65 9.511357142857143 0.8997857142857143c0.4150714285714286 0.04642857142857143 0.7484285714285716 0.3695714285714286 0.7948571428571428 0.7855714285714286 0.117 1.030714285714286 0.10214285714285715 1.776357142857143 -0.07150000000000001 2.885071428571429"
                      stroke-width="1"></path>
                    <path
                      fill-rule="evenodd"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M2.4430714285714283 10.474285714285713A1.8571428571428572 1.8571428571428572 0 0 1 0.6964285714285714 8.619V7.3125c0 -1.3928571428571428 0.4615 -2.572142857142857 2.3214285714285716 -2.7857142857142856 2.7225714285714284 -0.31200000000000006 4.243571428571429 -0.30828571428571433 6.964285714285714 0 1.8450714285714287 0.20892857142857144 2.3214285714285716 1.3928571428571428 2.3214285714285716 2.7857142857142856v1.3074285714285714a1.8571428571428572 1.8571428571428572 0 0 1 -1.7466428571428572 1.8534285714285714"
                      stroke-width="1"></path>
                    <path
                      fill-rule="evenodd"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M10.254214285714285 9.278285714285715c0.22378571428571428 0.5385714285714286 0.34264285714285714 1.262857142857143 0.3927857142857143 1.9565000000000003 0.03621428571428571 0.48471428571428576 -0.3435714285714286 0.8895714285714286 -0.8264285714285715 0.9220714285714285 -2.4746428571428574 0.16528571428571429 -4.1665 0.1662142857142857 -6.640214285714285 0 -0.48471428571428576 -0.0325 -0.8635714285714287 -0.43735714285714283 -0.8273571428571429 -0.9211428571428572 0.05014285714285714 -0.6927142857142857 0.16807142857142857 -1.417 0.39185714285714285 -1.9546428571428571 0.22285714285714286 -0.5348571428571428 0.8032142857142858 -0.7521428571428572 1.3789285714285715 -0.8190000000000001 1.7262142857142857 -0.20057142857142857 2.99 -0.20614285714285716 4.756142857142857 0 0.5729285714285715 0.06685714285714285 1.1514285714285715 0.28414285714285714 1.3742857142857143 0.8162142857142858Z"
                      stroke-width="1"></path>
                  </g>
                </svg>
                <span class="underline decoration-dotted">Print CV</span>
              </a>
            </li>
            <ThemeIcon />
          </ul>
        </div>
      </div>
    </div>
    <notifications position="bottom right"></notifications>
  </div>
</section>

<script>
  // ---- Config ----
  // Use window.location host on client (Astro.* not available in shipped HTML)
  const SITE_HOST = typeof window !== 'undefined' ? window.location?.host || '' : ''
  const SELECTORS = {
    printBtn: 'on-printer',
    followersWrap: '#gh-followers [data-count]',
    visitorsBadge: '#visitors-badge [data-count]',
    wakatimeWrap: '#wakatime-badge [data-count]',
  }
  const API = {
    bitkub: 'https://api.bitkub.com/api/market/ticker?sym=THB_USDT',
    githubUser: 'https://api.github.com/users/dvgamerr',
    visitor: (host) => `https://api.visitorbadge.io/api/visitors?path=${host}&label=visitors&countColor=%2337d67a&style=flat-square`,
  }

  // ---- DOM Helpers ----
  const qs = (sel, ctx = document) => ctx.querySelector(sel)
  const create = (tag, cls = '') => {
    const el = document.createElement(tag)
    if (cls) el.className = cls
    return el
  }

  // ---- Features ----
  function initPrintButton() {
    const btn = document.getElementById(SELECTORS.printBtn)
    if (!btn) return
    btn.addEventListener('click', (e) => {
      e.preventDefault()
      print()
    })
  }

  async function logUsdtTicker() {
    try {
      const res = await fetch(API.bitkub)
      if (!res.ok) return
      const json = await res.json()
      console.log({ THB_USDT: json['THB_USDT']?.last })
    } catch (_) {
      /* silent */
    }
  }

  async function updateGitHubFollowers() {
    try {
      const res = await fetch(API.githubUser)
      if (!res.ok) return
      const data = await res.json()
      const el = qs(SELECTORS.followersWrap)
      if (el && data.followers != null) el.textContent = data.followers
    } catch (e) {
      console.warn('GitHub followers fetch failed', e)
    }
  }

  async function updateVisitorCount() {
    if (!SITE_HOST) return
    try {
      const res = await fetch(API.visitor(SITE_HOST), { cache: 'no-store' })
      if (!res.ok) return
      const svg = await res.text()
      const match = svg.match(/>(\d[\d,]*)<\//)
      const count = match ? match[1].replace(/,/g, '') : '—'
      const el = qs(SELECTORS.visitorsBadge)
      if (el && count) el.textContent = count
    } catch (e) {
      console.warn('Visitor badge fetch failed', e)
    }
  }

  const init = () =>
    Promise.all([
      initPrintButton(),
      logUsdtTicker(), // fire & forget
      updateGitHubFollowers(),
      updateVisitorCount(),
    ])

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init)
  } else {
    init()
  }
</script>
